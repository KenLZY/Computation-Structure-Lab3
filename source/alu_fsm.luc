module alu_fsm #(
    
    CLK_FREQ ~ 1000 : CLK_FREQ > 0
    
)(
    input clk,         // Clock signal
    input rst_n,       // Active-low reset
    input io_button[5],  // Button to move between states
    input io_dip[3][8], // DIP switches (each 16 bits)
    output io_led[3][8], // LED output
    output led[8],
    output io_segment[8],
    output io_select[4]
) {
    
    const CLK_FREQ1 = $is_sim() ? 1000 : 100000000
    
    // FSM States
    enum States {
        INIT,
        A_LOWER,
        A_UPPER,
        B_LOWER,
        B_UPPER,
        ALUFN_SELECT,
        DISPLAY_UPPER,
        DISPLAY_LOWER
    }
    
    sig rst;

    .clk(clk) {
        
        reset_conditioner reset_cond;
        edge_detector io_button_edge[5](#RISE({1, 1, 1, 1, 1}), #FALL({0, 0, 0, 0, 0}))
        button_conditioner io_button_cond[5](#CLK_FREQ({CLK_FREQ1, CLK_FREQ1, CLK_FREQ1, CLK_FREQ1, CLK_FREQ1}))
        
        .rst(rst_n) {
            dff state[$width(States)](#INIT(States.INIT));
            dff a_reg[32];
            dff b_reg[32];
            dff alufn_reg[6];
            multi_seven_seg seg (#DIV($is_sim() ? 1 : 16), #DIGITS(4));
        }
        
    }

    alu alu_unit(#SIZE(32));
    bin_to_dec decimal_renderer(#DIGITS(4), #LEADING_ZEROS(1));

    always {
        
        alu_unit.a = 0;
        alu_unit.b = 0;
        alu_unit.alufn = io_dip[2][5:0];
        
        decimal_renderer.value = 0;
        seg.values = decimal_renderer.digits;
        
        io_led = 3x{{8h0}};
        led = 8h0;
        io_segment = 8h00;
        io_select = 4hF;
        
        reset_cond.in = ~rst_n;
        rst = reset_cond.out;

        
        io_button_cond.in = io_button;
        io_button_edge.in = io_button_cond.out;
        
        state.d = state.q;
        a_reg.d = a_reg.q;
        b_reg.d = b_reg.q;
        
        io_led[0] = io_dip[0];
        io_led[1] = io_dip[1];
        io_led[2] = io_dip[2];

        
        case (state.q) {
            
            
            States.INIT:
            decimal_renderer.value = 1;
            seg.values = decimal_renderer.digits;
            if (io_button_edge.out[1]) {
            state.d = States.A_LOWER;
            }
            
            
            States.A_LOWER:
            decimal_renderer.value = 2;
            seg.values = decimal_renderer.digits;
            if (io_button_edge.out[1]) {
            a_reg.d[7:0] = io_dip[0];
            a_reg.d[15:8] = io_dip[1];
            state.d = States.A_UPPER;
            }
           
            
            States.A_UPPER:
            decimal_renderer.value = 3;
            seg.values = decimal_renderer.digits;
            if (io_button_edge.out[1]) {
            a_reg.d[23:16] = io_dip[0];
            a_reg.d[31:24] = io_dip[1];
            state.d = States.B_LOWER;
            }
            
            
            States.B_LOWER:
            decimal_renderer.value = 4;
            seg.values = decimal_renderer.digits;
            if (io_button_edge.out[1]) {
            b_reg.d[7:0] = io_dip[0];
            b_reg.d[15:8] = io_dip[1];
            state.d = States.B_UPPER;
            }
            
            
            States.B_UPPER:
            decimal_renderer.value = 5;
            seg.values = decimal_renderer.digits;
            if (io_button_edge.out[1]) {
            b_reg.d[23:16] = io_dip[0];
            b_reg.d[31:24] = io_dip[1];
            state.d = States.ALUFN_SELECT;
            }
            
            
            States.ALUFN_SELECT:
            decimal_renderer.value = 6;
            seg.values = decimal_renderer.digits;
            if (io_button_edge.out[1]) {
            alufn_reg.d = io_dip[2][5:0];
            state.d = States.DISPLAY_UPPER;
            }
            
            
            States.DISPLAY_UPPER:
            decimal_renderer.value = 7;
            seg.values = decimal_renderer.digits;
            alu_unit.a = a_reg.q;
            alu_unit.b = b_reg.q;
            alu_unit.alufn = alufn_reg.q;
            io_led[1] = alu_unit.alu_output[31:24];
            io_led[0] = alu_unit.alu_output[23:16];
            if (io_button_edge.out[1]) {
            state.d = States.DISPLAY_LOWER;
            }
            
            
            States.DISPLAY_LOWER:
            decimal_renderer.value = 8;
            seg.values = decimal_renderer.digits;
            alu_unit.a = a_reg.q;
            alu_unit.b = b_reg.q;
            alu_unit.alufn = alufn_reg.q;
            io_led[1] = alu_unit.alu_output[15:8];
            io_led[0] = alu_unit.alu_output[7:0];
            led[7:5] = c{alu_unit.z, alu_unit.v, alu_unit.n};
            if (io_button_edge.out[1]){
            state.d = States.INIT;
            }
            
        }
        io_segment = ~seg.seg
        io_select = ~seg.sel
    }
}
