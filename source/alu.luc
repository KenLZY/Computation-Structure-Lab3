module alu #(
    SIZE ~ 32 : SIZE > 1
)
(
    input a[SIZE],
    input b[SIZE],
    input alufn[6],
    output alu_output[SIZE],
    output z,
    output v,
    output n
) {
    
    adder adder(#SIZE(SIZE))
    compare compare(#SIZE(SIZE))
    //multiplier multiplier
    boolean boolean(#SIZE(SIZE))
    shifter shifter(#SIZE(SIZE))
    
    always {
        
        adder.a = 0;
        adder.b = 0;
        adder.alufn_signal = 0;
        z = 0;
        v = 0;
        n = 0;
        alu_output = 0;
        boolean.a = 0;
        boolean.b = 0;
        boolean.alufn = 0;
        shifter.a = 0;
        shifter.b = 0;
        shifter.alufn = 0;
        compare.a = 0;
        compare.b = 0;
        compare.alufn = 0;
            
        case(alufn) {
            
            b000000: /* Addition */
            adder.a = a;
            adder.b = b;
            
            adder.alufn_signal = 0;
            
            z = adder.z;
            v = adder.v;
            n = adder.n;
            
            alu_output = adder.out;
            
            b000001: /* Subtraction */
            adder.a = a;
            adder.b = b;
            
            adder.alufn_signal = 1;
            
            z = adder.z;
            v = adder.v;
            n = adder.n;
            
            alu_output = adder.out;
            
            //b0000010: /* Multiplication */
            
            b011000: /* Boolean - AND */
            boolean.a = a;
            boolean.b = b;
            boolean.alufn = b001000;
            alu_output = boolean.bool;
            
            b011110: /* Boolean - OR */
            boolean.a = a;
            boolean.b = b;
            boolean.alufn = b001110;
            alu_output = boolean.bool;
            
            b010110: /* Boolean - XOR */
            boolean.a = a;
            boolean.b = b;
            boolean.alufn = b000110;
            alu_output = boolean.bool;
            
            b011010: /* Boolean - BUFFER */
            boolean.a = a;
            boolean.b = b;
            boolean.alufn = b001010;
            alu_output = boolean.bool;
            
            b100000: /* Shifter - Shift Left */
            shifter.a = a;
            shifter.b = b[4:0];
            shifter.alufn = b000000;
            alu_output = shifter.result;
            
            b100001: /* Shifter - Shift Right */
            shifter.a = a;
            shifter.b = b[4:0];
            shifter.alufn = b000001;
            alu_output = shifter.result;
            
            b100011: /* Shifter - Shift Right Arithmetic */
            shifter.a = a;
            shifter.b = b[4:0];
            shifter.alufn = b000011;
            alu_output = shifter.result;
            
            b110011: /* Compare - Equal */
            compare.a = a;
            compare.b = b;
            compare.alufn = b000010;
            alu_output = compare.cmp;
            
            b110101: /* Compare - Less Than */
            compare.a = a;
            compare.b = b;
            compare.alufn = b000100
            alu_output = compare.cmp;
            
            b110111: /* Compare - Less than or Equal to */
            compare.a = a;
            compare.b = b;
            compare.alufn = b000110;
            alu_output = compare.cmp;
        }
        
    }
}